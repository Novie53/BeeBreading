local config = {
    ["analyzerDir"] = "west", --From the perspecive of the chest above the compuer
	["ditchDir"] = "north",	--From the perspecive of the chest above the compuer
	["refChest"] = "up", --From the perspecive of the chest above the compuer
	["refChestSize"] = 27,
	["IgnoreCondition"] = true, 
	["EnsureCount15"] = 0,
	["DroneNumberDump"] = 10,
	["BreedEverythingInPath"] = true,
	["outputChest"] = "east"
}
local traitPriority = {
	["speed"] = 10,
	["lifespan"] = 0.08,
	["fertility"] = 0.4,
	["nocturnal"] = 0.1,
	["tolerantFlyer"] = 0.1,
	["caveDwelling"] = 0.1,
	["temperatureTolerance"] = 0.5,
	["humidityTolerance"] = 0.5,
	["effect"] = 0,
	["flowering"] = 0,
	["flowerProvider"] = 0,
	["territory"] = 0
}
local tArgs = {...}
local refrenseBeeTable = {}
local beeList = {}

function haveRecipe(mutations, targetSpecie)
	if mutations[targetSpecie] == nil then
		return false
	else
		return true
	end
end
function isBeeOrPrincess(bee)--1=Prin,2=Drone,3 Rest
	if bee.rawName == "item.beeprincessge" then
		return 1
	elseif bee.rawName == "item.beedronege" then
		return 2
	else
		return 3
	end
end
function isAnalyzed(bee)--True/False
	return bee.beeInfo.isAnalyzed
end
function HaveRefPair(specie)--True/False, ifall man har redan den species som refrense
	return beeList[specie]
end
function fixBeeName(name)
	return name:gsub("bees%.species%.",""):gsub("^.", string.upper)
end
function isPureBreed(bee)--True/False
	if bee.beeInfo.active.species == bee.beeInfo.inactive.species then
		return true
	else
		return false
	end
end
function alreadyHave(catalog, targetSpecie)--1:harRef, 2:harNÃ¥gon, 3:false
	if HaveRefPair(targetSpecie) then
		return 1
	elseif catalog.princessesBySpecies[targetSpecie] ~= nil or 
		catalog.dronesBySpecies[targetSpecie] ~= nil then
		return 2
	else
		return 3
	end
end
function count(tab)
	local count = 0
	for i,v in pairs(tab) do count = count + 1 end
	return count
end

function log(text)
	print(tostring(text))
end
function printCompare(bee1, bee2)
	shell.run("clear")
	log("slot:"..bee1.slot.." - "..bee2.slot)
	for i,v in pairs(bee1.beeInfo.score) do
		log(i..":"..tostring(v).." - "..tostring(bee2.beeInfo.score[i]))	
	end
end


function fixBee(bee)
	if bee.beeInfo == nil then
		bee.active.species = fixBeeName(bee.active.species)
		bee.inactive.species = fixBeeName(bee.inactive.species)
	else
		bee.beeInfo.active.species = fixBeeName(bee.beeInfo.active.species)
		bee.beeInfo.inactive.species = fixBeeName(bee.beeInfo.inactive.species)
	end
end
function scoreBee(bee)
	local function scoreFromTable(tab, trait)
		if tab[bee.beeInfo.active[trait]] == nil then
			log("score Value for "..trait.." Could not be found, Value = "..bee.beeInfo.active[trait])
		end
		if tab[bee.beeInfo.inactive[trait]] == nil then
			log("score Value for "..trait.." Could not be found, Value = "..bee.beeInfo.inactive[trait])
		end
		
		return (tab[bee.beeInfo.active[trait]] + tab[bee.beeInfo.inactive[trait]]) / 2 * traitPriority[trait]
	end
	local function scoreFromBoolean(trait)
		local function convertToInt(boolean)
			if boolean then
				return 1
			else
				return 0
			end		
		end
		
		return (convertToInt(bee.beeInfo.active[trait]) + 
				convertToInt(bee.beeInfo.inactive[trait]))
				/ 2 * traitPriority[trait]
	end
	local function scoreFromInt(trait)
		return (bee.beeInfo.active[trait] + 
				bee.beeInfo.inactive[trait])
				/ 2 * traitPriority[trait]
	end
	local function fixTerritory()
		if type(bee.beeInfo.active.territory) == "table" then
			bee.beeInfo.active.territory = string.format("%s:%s:%s", 
			bee.beeInfo.active.territory[1],
			bee.beeInfo.active.territory[2],
			bee.beeInfo.active.territory[3])
		end
		if type(bee.beeInfo.inactive.territory) == "table" then
			bee.beeInfo.inactive.territory = string.format("%s:%s:%s", 
			bee.beeInfo.inactive.territory[1],
			bee.beeInfo.inactive.territory[2],
			bee.beeInfo.inactive.territory[3])
		end
	end
	
	local toleranceTable = {
		["None"] = 0,
		["Both 1"] = 2
	}
	local effectTable = {
		["None"] = 0
	}
	local flowerTable = {
		["Flowers"] = 5,
		["Rocks"] = 3,
	}
	local territoryTable = {
		["9:6:9"] = 0
	}
	
	bee.beeInfo.score = {}
	fixTerritory()
	
	bee.beeInfo.score.temperatureTolerance = scoreFromTable(toleranceTable, "temperatureTolerance")
	bee.beeInfo.score.humidityTolerance = scoreFromTable(toleranceTable, "humidityTolerance")
	bee.beeInfo.score.effect = scoreFromTable(effectTable, "effect")
	bee.beeInfo.score.flowerProvider = scoreFromTable(flowerTable, "flowerProvider")
	bee.beeInfo.score.territory = scoreFromTable(territoryTable, "territory")
	bee.beeInfo.score.tolerantFlyer = scoreFromBoolean("tolerantFlyer")
	bee.beeInfo.score.caveDwelling = scoreFromBoolean("caveDwelling")
	bee.beeInfo.score.nocturnal = scoreFromBoolean("nocturnal")
	bee.beeInfo.score.fertility = scoreFromInt("fertility")
	bee.beeInfo.score.flowering = scoreFromInt("flowering")
	bee.beeInfo.score.speed = scoreFromInt("speed")
	bee.beeInfo.score.lifespan = scoreFromInt("lifespan")
	
	
	local total = 0 
	for i,v in pairs(bee.beeInfo.score) do
		total = total + v
	end
	bee.beeInfo.score.total = total
end
function findBestBee(beeTable)
	for slot, bee in pairs(beeTable) do
		scoreBee(bee)
	end
	
	local bestInSlot
	for slot, bee in pairs(beeTable) do
		if bestInSlot == nil then
			bestInSlot = slot
		else
			if beeTable[bestInSlot].beeInfo.score.total < bee.beeInfo.score.total then
				bestInSlot = slot
			end
		end
	end
	return bestInSlot
end
function mutateBeeChance(mutations, princess, drone, targetSpecies)
	local function mutateSpeciesChance(species1, species2)
		if species1 == species2 and species1 == targetSpecies then
			return 100
		elseif species1 == targetSpecies or species2 == targetSpecies then
			return 50
		end
		
		for ignore,v in pairs(mutations[targetSpecies]) do
			if (species1 == v.beeOne and species2 == v.beeTwo) or
			(species2 == v.beeOne and species1 == v.beeTwo) then
				return v.chance
			end
		end
		return 0
	end

	return (mutateSpeciesChance(princess.beeInfo.active.species, drone.beeInfo.active.species) / 4
             +mutateSpeciesChance(princess.beeInfo.inactive.species, drone.beeInfo.active.species) / 4
             +mutateSpeciesChance(princess.beeInfo.active.species, drone.beeInfo.inactive.species) / 4
             +mutateSpeciesChance(princess.beeInfo.inactive.species, drone.beeInfo.inactive.species) / 4)
end
function findPureBreeds(catalog, specie)
	local purePrin = {}
	local pureDrone = {}
	for ignore,v in pairs(catalog.princessesBySpecies[specie]) do
		if isPureBreed(v) then
			table.insert(purePrin, v)
		end
	end
	for ignore,v in pairs(catalog.dronesBySpecies[specie]) do
		if isPureBreed(v) then
			table.insert(pureDrone, v)
		end
	end
	return purePrin, pureDrone
end


function getBreedingTable(api)
	local function addToMuatationTable(mutTable, data, id)
		if mutTable[data.result] == nil then
			mutTable[data.result] = {}
		end
		local count = #mutTable[data.result]+1
		
		mutTable[data.result][count] = {}
		mutTable[data.result][count].beeOne = data.allele1
		mutTable[data.result][count].beeTwo = data.allele2
		mutTable[data.result][count].chance = data.chance
		mutTable[data.result][count].ID = id
		mutTable[data.result][count].result = data.result
		if #data["specialConditions"] > 0 then
			mutTable[data.result][count].hasSpecialCondition = true
			mutTable[data.result][count] = data.specialConditions
		else
			mutTable[data.result][count].hasSpecialCondition = false
		end
	end
	
	local mutationTable = {}
	log("Sorting Breeding Table")
	for id,v in pairs(api.getBeeBreedingData()) do
	
		v.allele1 = fixBeeName(v.allele1)
		v.allele2 = fixBeeName(v.allele2)
		v.result = fixBeeName(v.result)
		
		beeList[v.allele1] = false
		beeList[v.allele2] = false
		beeList[v.result] = false
		addToMuatationTable(mutationTable, v, id)
	end
	return mutationTable
end
function FindAGoodName(api, princessSlot, droneSlot)
	local function waitForTheApi()
		log("Waiting for the apiary")
		local x,y = term.getCursorPos()
		term.setCursorPos(24,y-1)
		
		local dotCount = 0
		while api.getStackInSlot(1) ~= nil do
			sleep(1.5)
			term.write(".")
			dotCount = dotCount + 1
			
			if dotCount > 5 then
				dotCount = 0
				term.clearLine()
				local x,y = term.getCursorPos()
				term.setCursorPos(1,y)
				term.write("Waiting for the apiary ")
			end
		end
		print("")
	end
	
	api.pullItem("up", princessSlot, 1, 1)
	api.pullItem("up", droneSlot, 1, 2)
	
	waitForTheApi()
	return clearApiary(api)
end
function creatRefrenseDrones(specie, inv, api)
	log("Creating more Refrense Drones")
	
	gettingRefPair(inv, specie, 1, 53, 54)
	FindAGoodName(api,53,54)
	
	
	local droneSlot
	local prinSlot
	for i,v in pairs(inv.getAllStacks()) do
		if not isAnalyzed(v) then
			if isBeeOrPrincess(v) == 1 then--Prin
				prinSlot = i
			else--Drone
				droneSlot = i
			end
		end
	end
	anaLyzeBee(prinSlot, inv)
	anaLyzeBee(droneSlot, inv)
	
	refrenseBeeTable[specie]["drone"].beeData.qty = refrenseBeeTable[specie]["drone"].beeData.qty + inv.getStackInSlot(droneSlot).qty - 1
	
	returnRefPair(inv, specie, prinSlot, droneSlot)
end
function ensurePureBreed(inv, api, specie)
	local pureCount = 0
	while pureCount < config.EnsureCount15 do
		log(specie..":"..pureCount)
		local catalog = sortBees(inv)
		
		if catalog.princessesBySpecies[specie] == nil or 
			catalog.dronesBySpecies[specie] == nil then
			return
		end
		
		local purePrin, pureDrone = findPureBreeds(catalog, specie)

		if #purePrin == 0 or #pureDrone == 0 then
			return
		end
		
		purePrin = purePrin[findBestBee(purePrin)]
		pureDrone = pureDrone[findBestBee(pureDrone)]

		if FindAGoodName(api, purePrin.slot, pureDrone.slot) == 2 then
			pureCount = pureCount + 1
		else
			pureCount = 0
		end
	end
end


function gettingRefDrone(inv, destiSlotDrone, count)--Todo



end
function gettingRefPair(inv, specie, droneCount, destiSlotPrin, destiSlotDrone)
	inv.pullItem(config.refChest, refrenseBeeTable[specie]["prin"].beeData.slot, 1, destiSlotPrin)
	inv.pullItem(config.refChest, refrenseBeeTable[specie]["drone"].beeData.slot, droneCount, destiSlotDrone)
end
function returnRefPair(inv, specie, prinSlot, droneSlot)
	inv.pushItem(config.refChest, prinSlot, 64, refrenseBeeTable[specie]["prin"].beeData.slot)
	inv.pushItem(config.refChest, droneSlot, 64, refrenseBeeTable[specie]["drone"].beeData.slot)
end


function breedTarget(specificMutation, catalog, mutations, api, inv)
	local function containsAtleastOneSpecie(searthTable)
		local newTable = {}
		for specie,table1 in pairs(searthTable) do
			if specie == specificMutation.beeOne or 
			specie == specificMutation.beeTwo or
			specie == specificMutation.result then
				for ignore,v in pairs(table1) do
					local found = false					
					for a,d in pairs(newTable) do
						if d.slot == v.slot then
							if d.ref == nil and v.ref == nil then
								found = true
							elseif d.ref == v.ref then
								found = true
							end
						end
					end
					if not found then
						table.insert(newTable,v)
					end
				end
			end
		end
		return newTable
	end
	local function crossMatch(tabPrin, tabDrone)
		local newTable = {}
		for ignore, beePrin in pairs(tabPrin) do
			for ignore, beeDrone in pairs(tabDrone) do
				local temp = {}
				temp.beePrin = beePrin
				temp.beeDrone = beeDrone
				table.insert(newTable, temp)
			end
		end
		return newTable
	end
	
	log(specificMutation.beeOne.."+"..specificMutation.beeTwo.."="..specificMutation.result)

	local combinations = crossMatch(containsAtleastOneSpecie(catalog.princessesBySpecies), 
									containsAtleastOneSpecie(catalog.dronesBySpecies))
	
	
	local highestTable = {}
	local highest = 0
	
	for ignore,table1 in pairs(combinations) do
		local tempVal = mutateBeeChance(mutations, table1.beePrin, table1.beeDrone, specificMutation.result)
		if tempVal > highest then
			highestTable = {}
			highest = tempVal
			table.insert(highestTable, table1)
		elseif tempVal == highest then
			table.insert(highestTable, table1)
		end
	end
	
	local picked = highestTable[1]
	if #highestTable > 1 then
		for ignore,table1 in pairs(highestTable) do
			scoreBee(table1.beePrin)
			scoreBee(table1.beeDrone)
			table1.score = (table1.beePrin.beeInfo.score.total + table1.beeDrone.beeInfo.score.total) / 2
		end
		
		local highestScore = 0
		for ignore, table1 in pairs(highestTable) do
			if table1.score > highestScore then
				highestScore = table1.score
				picked = table1
			end
		end
	end
	
	if picked.beeDrone.ref then
		log("Grabbing a refrenseDrone, "..picked.beeDrone.beeInfo.active.species)
		while picked.beeDrone.qty == 1 do
			log("Need to breed more Drones")
			creatRefrenseDrones(picked.beeDrone.beeInfo.active.species, inv, api)
		end

		inv.pullItem("up", picked.beeDrone.slot, 1, 54)
		picked.beeDrone.slot = 54
	end
		
	FindAGoodName(api, picked.beePrin.slot, picked.beeDrone.slot)
	
	ensurePureBreed(inv, api, specificMutation.result)
end
function getAllPossible(mutations, catalog, targetSpecies)
	local function oneLayer(target, tab)
		for ignore,v in pairs(mutations[target]) do
			if not (config.IgnoreCondition and v.hasSpecialCondition) then
				table.insert(tab, v)
			end
		end
	end
	
	local processed = {}
	local stack = {}
	local NewStack = {}
	
	oneLayer(targetSpecies, stack)
	while #stack > 0 do
		for i,v in pairs(stack) do
			v.beeOneCanBreed = haveRecipe(mutations, v.beeOne)
			v.beeTwoCanBreed = haveRecipe(mutations, v.beeTwo)
			v.beeOneAlreadyHave = alreadyHave(catalog, v.beeOne)
			v.beeTwoAlreadyHave = alreadyHave(catalog, v.beeTwo)
		end
		
		for i,v in pairs(stack) do
			
			if v.beeOneCanBreed then
				oneLayer(v.beeOne, NewStack)
			end
			if v.beeTwoCanBreed then
				oneLayer(v.beeTwo, NewStack)
			end
		end
		for k,v in pairs(stack) do table.insert(processed, v) end
		stack = NewStack
		NewStack = {}
	end
	
	for i=1,#processed do
		if (processed[i].beeOneAlreadyHave ~= 3 or processed[i].beeOneCanBreed) 
		and (processed[i].beeTwoAlreadyHave ~= 3 or processed[i].beeTwoCanBreed) then
			table.insert(NewStack, processed[i])
		end
	end
	
	
	if #NewStack == 0 then
		log(" -- Need more starter Bees -- ")
		log(" -- Press ENTER when ready -- ")
		io.read()
	end
	
	processed = NewStack
	NewStack = {}
	
	local alreadyHave = false
	for i=1,#processed do
		for a=1, #NewStack do
			if processed[i].ID == NewStack[a].ID then
				alreadyHave = true
			end
		end
		if not alreadyHave then
			table.insert(NewStack, processed[i])
		end
	end
	return NewStack
end
function MainRec(mutations, inv, targetSpecies, api)
	while not HaveRefPair(targetSpecies) do
		local catalog = sortBees(inv)

		while count(catalog.dronesBySpecies) == 0 do
			log(" -- Need more drones -- ")
			log(" -- Press ENTER when ready -- ")
			io.read()
			catalog = sortBees(inv)
		end
		while count(catalog.princessesBySpecies) == 0 do
			log(" -- Need more princesses -- ")
			log(" -- Press ENTER when ready -- ")
			io.read()
			catalog = sortBees(inv)
		end
		
		local stuffToBreed = getAllPossible(mutations, catalog, targetSpecies)
		
		if config.BreedEverythingInPath then
			for i= #stuffToBreed ,1 , -1 do
				if stuffToBreed[i].beeOneAlreadyHave == 1 and stuffToBreed[i].beeTwoAlreadyHave == 1 then
					breedTarget(stuffToBreed[i], catalog, mutations, api, inv)
				end
			end	
		else
			for ignore,v in pairs(stuffToBreed) do
				if v.beeOneState == 3 and v.beeTwoState == 3 then
					breedTarget(v, catalog, mutations, api, inv)
				end
			end
		end
	end
end


function anaLyzeBee(slot, inv)
	log("Analyzing bee in slot: "..slot)
	inv.pushItem(config.analyzerDir, slot, 64, 3)
	local sec = 5
	sleep(5)
	while inv.pullItem(config.analyzerDir, 9, 64, slot) == 0 do
		sleep(1)
		sec = sec + 1
		if sec == 30 then
			log("-- You probably need to refill honey --")
		end
	end
end
function catalogBees(inv)
	local function addBySpecies(beesBySpecies, bee)
		if beesBySpecies[bee.beeInfo.active.species] == nil then
			beesBySpecies[bee.beeInfo.active.species] = {bee}
		else
			table.insert(beesBySpecies[bee.beeInfo.active.species], bee)
		end
		if bee.beeInfo.inactive.species ~= bee.beeInfo.active.species then
			if beesBySpecies[bee.beeInfo.inactive.species] == nil then
				beesBySpecies[bee.beeInfo.inactive.species] = {bee}
			else
				table.insert(beesBySpecies[bee.beeInfo.inactive.species], bee)
			end
		end
	end
	
	catalog = {}
	catalog.princessesBySpecies = {}
	catalog.dronesBySpecies = {}
		
	for specie, beePair in pairs(refrenseBeeTable) do	
		addBySpecies(catalog.dronesBySpecies, beePair["drone"].beeData)
	end
	
	for slot, bee in pairs(inv.getAllStacks()) do
		fixBee(bee)
		bee.slot = slot
		
		if isBeeOrPrincess(bee) == 1 then -- princess
			addBySpecies(catalog.princessesBySpecies, bee)
		else -- drones
			bee.ref = false
			addBySpecies(catalog.dronesBySpecies, bee)
		end
	end
	return catalog
end
function ditchDrones(inv)
	if config.DroneNumberDump > (inv.size - #inv.getAllStacks()) then
		log("Ditching obsolete Drones")
		for slot, bee in pairs(inv.getAllStacks()) do		
			if isBeeOrPrincess(bee) == 2 and -- The bee is a drone
			beeList[bee.beeInfo.active.species] and -- Already have a refrense princess for the active species
			beeList[bee.beeInfo.inactive.species] then -- Already have a refrense princess for the inactive species
				while inv.pushItem(config.ditchDir,slot) == 0 do
					log("DitchChest is full")
					log("Fix it !!!!!!!!!!!!!!!!!")
					io.read()
				end
			end
		end
	end
end
function analyzeAllBees(inv)
	log("Analyzing Bees")
	inv.condenseItems()
	for i,v in pairs(inv.getAllStacks()) do
		if not isAnalyzed(v) then
			anaLyzeBee(i, inv)
		end
	end
	inv.condenseItems()
end


function lookForNewRef(catalog, inv, api)
	local speciesToCheck = {}
	for specie, slot in pairs(catalog.princessesBySpecies) do
		for slot, bee in pairs(slot) do
			if isPureBreed(bee) and catalog.dronesBySpecies[specie] ~= nil then
				speciesToCheck[specie] = false
			end
		end
	end
	for specie, ignore in pairs(speciesToCheck) do
		for slot, bee in pairs(catalog.dronesBySpecies[specie]) do
			if isPureBreed(bee) then
				speciesToCheck[specie] = true
			end
		end
	end
	
	for specie, bool in pairs(speciesToCheck) do
		if bool then
			ensurePureBreed(inv, api, specie)
			local purePrin, pureDrone = findPureBreeds(catalog, specie)
			
			purePrin = purePrin[findBestBee(purePrin)]
			pureDrone = pureDrone[findBestBee(pureDrone)]
			
			local oldPrinSlot = purePrin.slot
			local oldDroneSlot = pureDrone.slot
			
			beeList[specie] = true
			refrenseBeeTable[specie] = {}
			refrenseBeeTable[specie]["prin"] = {}
			refrenseBeeTable[specie]["prin"].beeData = inv.getStackInSlot(oldPrinSlot)
			refrenseBeeTable[specie]["prin"].beeData.slot = count(refrenseBeeTable)*2-1
			refrenseBeeTable[specie]["drone"] = {}
			refrenseBeeTable[specie]["drone"].beeData = inv.getStackInSlot(oldDroneSlot)
			refrenseBeeTable[specie]["drone"].beeData.slot = count(refrenseBeeTable)*2
			refrenseBeeTable[specie]["drone"].beeData.ref = true
			
			inv.pushItem(config.refChest, oldPrinSlot, 64, count(refrenseBeeTable)*2-1)
			inv.pushItem(config.refChest, oldDroneSlot, 64, count(refrenseBeeTable)*2)
		end
	end
end
function cataLogRefChest(inv)
	refrenseBeeTable = {}
	log("Catalogging all refrenseBeePairs")
	for i=1,config.refChestSize do
		if inv.pullItem(config.refChest, i, 64, inv.size) == 0 then break end
		
		local a = inv.getStackInSlot(inv.size)
		if not isPureBreed(a) then
			log("Error: RefBee in slot:"..i.." is not a purebreed")
			io.read()
		end
		
		beeList[a.beeInfo.active.species] = true
		refrenseBeeTable[a.beeInfo.active.species] = {}
		if isBeeOrPrincess(a) == 1 then
			refrenseBeeTable[a.beeInfo.active.species]["prin"] = {}
			refrenseBeeTable[a.beeInfo.active.species]["prin"].beeData = a
			refrenseBeeTable[a.beeInfo.active.species]["prin"].beeData.slot = i
		else
			refrenseBeeTable[a.beeInfo.active.species]["drone"] = {}
			refrenseBeeTable[a.beeInfo.active.species]["drone"].beeData = a
			refrenseBeeTable[a.beeInfo.active.species]["drone"].beeData.slot = i
			refrenseBeeTable[a.beeInfo.active.species]["drone"].beeData.ref = true
		end
		inv.pushItem(config.refChest, inv.size, 64, i)
	end
end
function clearApiary(api)--Returns beeCount that was extracted, 
	-- 1:Princess Slot
	-- 2:Drone Slot
	-- 3-9 Output Slots
	-- 10-12 Frame Slots
	log("Clearing Apiary")
	local beeCount = 0
	local inv = api.getAllStacks()
	for slot = 3, 9 do
		if inv[slot] then
			if isBeeOrPrincess(inv[slot]) ~= 3 then
				if api.pushItem("up",slot) == 0 then
					log("Error: MainChest is full")
					log("Press [ENTER] When ready")
					io.read()
				else
					beeCount = beeCount + 1
				end
			else
				if api.pushItem(config.outputChest, slot) == 0 then
					log("Error: OutputChest is full")
					log("Press [ENTER] When ready")
					io.read()
				end
			end
		end
	end
	return beeCount
end
function clearAnalyzer(inv)
	log("Clearing Analyzer")
	for i=1,12 do
		inv.pullItem(config.analyzerDir, i)
	end
end
function sortBees(inv)
	log("Sorting Bees")
	analyzeAllBees(inv)
	ditchDrones(inv)
	return catalogBees(inv)
end

function main()
	local inv = peripheral.wrap("top")
	local apiary = peripheral.wrap("left")
	local mutationTable = getBreedingTable(apiary)
	inv.size = inv.getInventorySize()
	cataLogRefChest(inv)
	clearApiary(apiary)
	clearAnalyzer(inv)
	local catalog = sortBees(inv)
	lookForNewRef(catalog, inv, apiary)

	log("Prep is finished")
		
	if tArgs[1] == nil then
		log("Enter a species to aim for")
		return
	end
	local targetSpecies = tArgs[1]:sub(1,1):upper()..tArgs[1]:sub(2):lower()

	if beeList[targetSpecies] == nil then
		log("Could not find a species with the name: "..targetSpecies)
		return
	elseif HaveRefPair(targetSpecies) then
		log(string.format("There already is a purebreed %s in the refrense chest", targetSpecies))
		return	
	else
		log("Main Target is "..targetSpecies)
	end
		
	MainRec(mutationTable, inv, targetSpecies, apiary)
end

main()